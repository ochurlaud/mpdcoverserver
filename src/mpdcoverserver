#!/usr/bin/python3
# coding=utf-8

import argparse
import os
import http.server
import socketserver
from urllib.parse import unquote

from songcovers import getcover

DEFAULT_PORT = 8000

class MPDCoverHandler(http.server.SimpleHTTPRequestHandler):

    def do_GET(self):
        # Need to remove the first /
        realpath = os.path.join(self.server.musicdir, unquote(self.path)[1:])
        print("Try to get {}".format(realpath))
        realpath = os.path.dirname(realpath)

        try:
            mime, data = getcover(realpath)
        except Exception as e:
            self. send_error(404, message="Exception raised during getcover: " + str(e))
            return

        if data is None:
            self. send_error(404, message="No data returned from getcover")
            return

        self.send_response(200)
        self.send_header("Content-type", mime)
        self.send_header("Content-length", len(data))
        self.end_headers()
        self.wfile.write(data)

class MPDCoverServer(socketserver.TCPServer):
    def __init__(self, address, handler, music_dir):
        self.musicdir = music_dir
        socketserver.TCPServer.__init__(self, address, handler)


def parseargs():
    parser = argparse.ArgumentParser(
            prog="MPDCoverServer",
            description="A simple HTTP server that serves covers from music files")

    parser.add_argument('--port', '-p', default=DEFAULT_PORT, type=int, help="port to listen (default {})".format(DEFAULT_PORT))
    parser.add_argument('MUSIC_DIR', help="the path to your music directory")
    args = parser.parse_args()
    return args.port, args.MUSIC_DIR

if __name__ == "__main__":
    port, musicdir = parseargs()

    Handler = MPDCoverHandler
    
    with MPDCoverServer(("", port), Handler, musicdir) as httpd:
        print("Serving at port", port)
        print("Music folder is", musicdir)
        httpd.serve_forever()

